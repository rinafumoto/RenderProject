OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: 
shader shader
param	color	Cin	0 0 0		%read{7,46} %write{2147483647,-1}
oparam	color	Cout	0 0 0		%read{46,77} %write{7,77}
oparam	color	Cout2	0 0 0		%read{62,78} %write{46,78}
oparam	float	disp	0		%read{5,82} %write{4,82}
oparam	float	disp2	0		%read{86,86} %write{59,86}
oparam	color	test	0 0 0		%read{2147483647,-1} %write{2147483647,-1}
global	point	P	%read{40,83} %write{2147483647,-1}
global	float	u	%read{0,22} %write{2147483647,-1}
global	float	v	%read{20,53} %write{2147483647,-1}
local	float	___269_result	%read{75,75} %write{73,74}
local	float	___270_xclamped	%read{71,71} %write{70,70}
local	int	f	%read{3,3} %write{2,2}
local	int	i	%read{13,35} %write{8,35}
local	float	randomLines	%read{13,35} %write{13,35}
local	float	filter	%read{13,35} %write{13,35}
local	float	mag	%read{13,61} %write{9,52}
local	float	freq	%read{13,35} %write{10,35}
local	color	dark	%read{39,39} %write{37,37}
local	float	mask	%read{45,61} %write{44,56}
local	float	dots	%read{69,84} %write{64,75}
local	color	dotcolor	%read{77,78} %write{76,76}
temp	float	$tmp1	%read{2,2} %write{1,1}
temp	float	$tmp2	%read{1,1} %write{0,0}
const	float	$const2	2400		%read{0,0} %write{2147483647,-1}
const	int	$const3	2		%read{3,3} %write{2147483647,-1}
temp	int	$tmp3	%read{4,4} %write{3,3}
const	float	$const4	1.25		%read{6,6} %write{2147483647,-1}
const	float	$const5	0.5		%read{5,38} %write{2147483647,-1}
temp	float	$tmp4	%read{6,6} %write{5,5}
temp	float	$tmp5	%read{7,7} %write{6,6}
const	int	$const6	0		%read{8,14} %write{2147483647,-1}
const	int	$const7	1		%read{10,35} %write{2147483647,-1}
const	int	$const8	7		%read{13,13} %write{2147483647,-1}
temp	int	$tmp6	%read{13,35} %write{13,35}
temp	int	$tmp7	%read{11,35} %write{12,35}
const	string	$const9	"uperlin"		%read{18,83} %write{2147483647,-1}
temp	float	$tmp8	%read{13,35} %write{13,35}
temp	float	$tmp9	%read{13,35} %write{13,35}
const	float	$const11	300		%read{16,16} %write{2147483647,-1}
temp	float	$tmp10	%read{13,35} %write{13,35}
const	float	$const12	0		%read{19,76} %write{2147483647,-1}
const	float	$const13	0.800000012		%read{19,28} %write{2147483647,-1}
temp	float	$tmp11	%read{13,35} %write{13,35}
temp	float	$tmp12	%read{13,35} %write{13,35}
const	float	$const15	10		%read{21,85} %write{2147483647,-1}
temp	float	$tmp13	%read{13,35} %write{13,35}
const	string	$const16	"perlin"		%read{24,48} %write{2147483647,-1}
temp	float	$tmp14	%read{13,35} %write{13,35}
temp	float	$tmp15	%read{13,35} %write{13,35}
const	float	$const18	25		%read{23,23} %write{2147483647,-1}
const	float	$const19	0.300000012		%read{25,25} %write{2147483647,-1}
temp	float	$tmp16	%read{13,35} %write{13,35}
temp	float	$tmp17	%read{13,35} %write{13,35}
const	float	$const20	0.200000003		%read{28,28} %write{2147483647,-1}
temp	float	$tmp18	%read{13,35} %write{13,35}
const	float	$const21	1		%read{30,72} %write{2147483647,-1}
temp	float	$tmp19	%read{13,35} %write{13,35}
temp	float	$tmp20	%read{13,35} %write{13,35}
const	float	$const22	2.0999999		%read{34,34} %write{2147483647,-1}
const	string	$const23	"rgb"		%read{37,76} %write{2147483647,-1}
const	float	$const24	0.330000013		%read{37,37} %write{2147483647,-1}
const	float	$const25	0.129999995		%read{37,37} %write{2147483647,-1}
const	float	$const26	0.0399999991		%read{37,37} %write{2147483647,-1}
temp	float	$tmp21	%read{39,39} %write{38,38}
const	string	$const27	"usimplex"		%read{41,64} %write{2147483647,-1}
temp	point	$tmp22	%read{41,41} %write{40,40}
temp	float	$tmp23	%read{44,44} %write{43,43}
temp	float	$tmp24	%read{43,43} %write{42,42}
const	float	$const29	4		%read{42,42} %write{2147483647,-1}
temp	float	$tmp25	%read{46,46} %write{45,45}
temp	float	$tmp26	%read{50,50} %write{49,49}
temp	float	$tmp27	%read{49,49} %write{48,48}
temp	point	$tmp28	%read{48,48} %write{47,47}
const	float	$const31	100		%read{47,47} %write{2147483647,-1}
const	float	$const33	20		%read{50,63} %write{2147483647,-1}
const	float	$const34	0.899999976		%read{52,74} %write{2147483647,-1}
temp	float	$tmp29	%read{52,52} %write{51,51}
temp	float	$tmp30	%read{56,56} %write{55,55}
temp	float	$tmp31	%read{54,54} %write{53,53}
const	float	$const36	6		%read{53,53} %write{2147483647,-1}
temp	float	$tmp32	%read{55,55} %write{54,54}
temp	float	$tmp33	%read{58,58} %write{57,57}
temp	float	$tmp34	%read{59,59} %write{58,58}
temp	color	$tmp35	%read{62,62} %write{60,60}
temp	float	$tmp36	%read{62,62} %write{61,61}
temp	point	$tmp37	%read{64,64} %write{63,63}
const	string	$const37	"linearstep"		%read{65,65} %write{2147483647,-1}
temp	int	$tmp38	%read{67,67} %write{66,66}
const	string	$const38	"clamp"		%read{68,68} %write{2147483647,-1}
temp	float	$tmp39	%read{70,70} %write{69,69}
temp	float	$tmp40	%read{73,73} %write{71,71}
temp	float	$tmp41	%read{73,73} %write{72,72}
const	float	$const39	0.230000004		%read{76,76} %write{2147483647,-1}
const	float	$const40	0.0299999993		%read{76,76} %write{2147483647,-1}
temp	float	$tmp42	%read{80,80} %write{79,79}
temp	float	$tmp43	%read{81,81} %write{80,80}
temp	float	$tmp44	%read{82,82} %write{81,81}
temp	float	$tmp45	%read{84,84} %write{83,83}
temp	float	$tmp46	%read{85,85} %write{84,84}
temp	float	$tmp47	%read{86,86} %write{85,85}
code ___main___
# shader.osl:11
#     int f = (int)floor(u*2400);
	mul		$tmp2 u $const2 	%filename{"shader.osl"} %line{11} %argrw{"wrr"}
	floor		$tmp1 $tmp2 	%argrw{"wr"}
	assign		f $tmp1 	%argrw{"wr"}
# shader.osl:12
#     disp = (float)(f%2);
	mod		$tmp3 f $const3 	%line{12} %argrw{"wrr"}
	assign		disp $tmp3 	%argrw{"wr"}
# shader.osl:13
#     Cout = (1.25-disp*0.5)*Cin;
	mul		$tmp4 disp $const5 	%line{13} %argrw{"wrr"}
	sub		$tmp5 $const4 $tmp4 	%argrw{"wrr"}
	mul		Cout $tmp5 Cin 	%argrw{"wrr"}
# shader.osl:16
#     int i=0;
	assign		i $const6 	%line{16} %argrw{"wr"}
# shader.osl:19
#     float mag = 0;
	assign		mag $const6 	%line{19} %argrw{"wr"}
# shader.osl:20
#     float freq = 1;
	assign		freq $const7 	%line{20} %argrw{"wr"}
# shader.osl:22
#     for (i=0;i<7;i+=1)
	for		$tmp7 13 15 35 36 	%line{22} %argrw{"r"}
	assign		i $const6 	%argrw{"wr"}
	lt		$tmp6 i $const8 	%argrw{"wrr"}
	neq		$tmp7 $tmp6 $const6 	%argrw{"wrr"}
# shader.osl:24
#         randomLines = (float)noise("uperlin",(u+freq)*300+freq);
	add		$tmp8 u freq 	%line{24} %argrw{"wrr"}
	mul		$tmp9 $tmp8 $const11 	%argrw{"wrr"}
	add		$tmp10 $tmp9 freq 	%argrw{"wrr"}
	noise		randomLines $const9 $tmp10 	%argrw{"wrr"}
# shader.osl:25
#         randomLines = smoothstep(0,0.8,randomLines);
	smoothstep	randomLines $const12 $const13 randomLines 	%line{25} %argrw{"wrrr"}
# shader.osl:26
#         filter = (float)noise("uperlin",(v+freq)*10+noise("perlin",((u+freq)*25))*0.3);
	add		$tmp11 v freq 	%line{26} %argrw{"wrr"}
	mul		$tmp12 $tmp11 $const15 	%argrw{"wrr"}
	add		$tmp14 u freq 	%argrw{"wrr"}
	mul		$tmp15 $tmp14 $const18 	%argrw{"wrr"}
	noise		$tmp13 $const16 $tmp15 	%argrw{"wrr"}
	mul		$tmp16 $tmp13 $const19 	%argrw{"wrr"}
	add		$tmp17 $tmp12 $tmp16 	%argrw{"wrr"}
	noise		filter $const9 $tmp17 	%argrw{"wrr"}
# shader.osl:27
#         filter = smoothstep(0.2,0.8,filter);
	smoothstep	filter $const20 $const13 filter 	%line{27} %argrw{"wrrr"}
# shader.osl:28
#         mag += 1-smoothstep(0,1,randomLines+filter);
	add		$tmp19 randomLines filter 	%line{28} %argrw{"wrr"}
	smoothstep	$tmp18 $const12 $const21 $tmp19 	%argrw{"wrrr"}
	sub		$tmp20 $const21 $tmp18 	%argrw{"wrr"}
	add		mag mag $tmp20 	%argrw{"wrr"}
# shader.osl:29
#         mag = smoothstep(0,1,mag);
	smoothstep	mag $const12 $const21 mag 	%line{29} %argrw{"wrrr"}
# shader.osl:30
#         freq *= 2.1;
	mul		freq freq $const22 	%line{30} %argrw{"wrr"}
# shader.osl:22
#     for (i=0;i<7;i+=1)
	add		i i $const7 	%line{22} %argrw{"wrr"}
# shader.osl:33
#     mag = 1-mag;
	sub		mag $const21 mag 	%line{33} %argrw{"wrr"}
# shader.osl:34
#     color dark=color("rgb",0.33,0.13,0.04);
	color		dark $const23 $const24 $const25 $const26 	%line{34} %argrw{"wrrrr"}
# shader.osl:35
#     Cout = mix(Cin,dark,mag*0.5);
	mul		$tmp21 mag $const5 	%line{35} %argrw{"wrr"}
	mix		Cout Cin dark $tmp21 	%argrw{"wrrr"}
# shader.osl:38
#     mag = (float)noise("usimplex", P*10);
	mul		$tmp22 P $const15 	%line{38} %argrw{"wrr"}
	noise		mag $const27 $tmp22 	%argrw{"wrr"}
# shader.osl:39
#     float mask = smoothstep(0,1,sin(v*4));
	mul		$tmp24 v $const29 	%line{39} %argrw{"wrr"}
	sin		$tmp23 $tmp24 	%argrw{"wr"}
	smoothstep	mask $const12 $const21 $tmp23 	%argrw{"wrrr"}
# shader.osl:40
#     Cout2 = mix(Cout,Cin,mag*mask);
	mul		$tmp25 mag mask 	%line{40} %argrw{"wrr"}
	mix		Cout2 Cout Cin $tmp25 	%argrw{"wrrr"}
# shader.osl:43
# 	mag=abs((float)noise("perlin",P*100))*20;
	mul		$tmp28 P $const31 	%line{43} %argrw{"wrr"}
	noise		$tmp27 $const16 $tmp28 	%argrw{"wrr"}
	abs		$tmp26 $tmp27 	%argrw{"wr"}
	mul		mag $tmp26 $const33 	%argrw{"wrr"}
# shader.osl:44
#     mag=smoothstep(0.9,1,1-mag);
	sub		$tmp29 $const21 mag 	%line{44} %argrw{"wrr"}
	smoothstep	mag $const34 $const21 $tmp29 	%argrw{"wrrr"}
# shader.osl:45
#     mask = smoothstep(0,1,sin(v*6-1));
	mul		$tmp31 v $const36 	%line{45} %argrw{"wrr"}
	sub		$tmp32 $tmp31 $const21 	%argrw{"wrr"}
	sin		$tmp30 $tmp32 	%argrw{"wr"}
	smoothstep	mask $const12 $const21 $tmp30 	%argrw{"wrrr"}
# shader.osl:46
#     disp2 = smoothstep(0,1,mag*mask+disp);
	mul		$tmp33 mag mask 	%line{46} %argrw{"wrr"}
	add		$tmp34 $tmp33 disp 	%argrw{"wrr"}
	smoothstep	disp2 $const12 $const21 $tmp34 	%argrw{"wrrr"}
# shader.osl:47
#     Cout2 = mix(Cout2,1,mag*mask);
	assign		$tmp35 $const21 	%line{47} %argrw{"wr"}
	mul		$tmp36 mag mask 	%argrw{"wrr"}
	mix		Cout2 Cout2 $tmp35 $tmp36 	%argrw{"wrrr"}
# shader.osl:50
#     float dots = noise("usimplex",P*20);
	mul		$tmp37 P $const33 	%line{50} %argrw{"wrr"}
	noise		dots $const27 $tmp37 	%argrw{"wrr"}
# shader.osl:51
#     dots = linearstep(0.9,1,dots);
	functioncall	$const37 76 	%line{51} %argrw{"r"}
# /opt/pixar/RenderManProServer-24.1/lib/osl/include/stdosl.h:361
#     if (edge0 != edge1) {
	neq		$tmp38 $const34 $const21 	%filename{"/opt/pixar/RenderManProServer-24.1/lib/osl/include/stdosl.h"} %line{361} %argrw{"wrr"}
	if		$tmp38 74 75 	%argrw{"r"}
# /opt/pixar/RenderManProServer-24.1/lib/osl/include/stdosl.h:362
#         float xclamped = clamp (x, edge0, edge1);
	functioncall	$const38 71 	%line{362} %argrw{"r"}
# /opt/pixar/RenderManProServer-24.1/lib/osl/include/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp39 dots $const21 	%line{163} %argrw{"wrr"}
	max		___270_xclamped $tmp39 $const34 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-24.1/lib/osl/include/stdosl.h:363
#         result = (xclamped - edge0) / (edge1 - edge0);
	sub		$tmp40 ___270_xclamped $const34 	%line{363} %argrw{"wrr"}
	sub		$tmp41 $const21 $const34 	%argrw{"wrr"}
	div		___269_result $tmp40 $tmp41 	%argrw{"wrr"}
# /opt/pixar/RenderManProServer-24.1/lib/osl/include/stdosl.h:365
#         result = step (edge0, x);
	step		___269_result $const34 dots 	%line{365} %argrw{"wrr"}
# /opt/pixar/RenderManProServer-24.1/lib/osl/include/stdosl.h:367
#     return result;
	assign		dots ___269_result 	%line{367} %argrw{"wr"}
# shader.osl:52
#     color dotcolor = color("rgb",0.23,0.03,0.0);
	color		dotcolor $const23 $const39 $const40 $const12 	%filename{"shader.osl"} %line{52} %argrw{"wrrrr"}
# shader.osl:53
#     Cout = mix(Cout,dotcolor,dots);
	mix		Cout Cout dotcolor dots 	%line{53} %argrw{"wrrr"}
# shader.osl:54
#     Cout2 = mix(Cout2,dotcolor,dots);
	mix		Cout2 Cout2 dotcolor dots 	%line{54} %argrw{"wrrr"}
# shader.osl:55
#     disp += dots*noise("uperlin",P)*10;
	noise		$tmp42 $const9 P 	%line{55} %argrw{"wrr"}
	mul		$tmp43 dots $tmp42 	%argrw{"wrr"}
	mul		$tmp44 $tmp43 $const15 	%argrw{"wrr"}
	add		disp disp $tmp44 	%argrw{"wrr"}
# shader.osl:56
#     disp2 += dots*noise("uperlin",P)*10;
	noise		$tmp45 $const9 P 	%line{56} %argrw{"wrr"}
	mul		$tmp46 dots $tmp45 	%argrw{"wrr"}
	mul		$tmp47 $tmp46 $const15 	%argrw{"wrr"}
	add		disp2 disp2 $tmp47 	%argrw{"wrr"}
	end
